//: Playground - noun: a place where people can play

import UIKit

var str = "Hello, playground"
/*
 问题：
 1.没法names.count直接？说白了就是forin不理解
 let names:[String] = ["Ane","Box","Cat","Dog"]
 let count = names.count
 
 for index in 0..< names.count = {
 print(index)
 }
 这样也是不行的，那我等到去forin去解决了，目前专注当前规定的任务
 for index in names = {
 print(index)
 }
 术语
 运算符分为一元、二元和三元运算符:
 一元运算符对单一操作对象操作（如 -a）。一元运算符分前置运算符和后置运算符，前置运算符需紧跟在操作对象之前（如 !b），后置运算符需紧跟在操作对象之后（如 c!）。
 二元运算符操作两个操作对象（如 2 + 3），是中置的，因为它们出现在两个操作对象之间。
 三元运算符操作三个操作对象，和 C 语言一样，Swift 只有一个三元运算符，就是三目运算符（a ? b : c）。
 ‘受运算符影响的值叫操作数’，在表达式 1 + 2 中，加号 + 是二元运算符，它的两个操作数是值 1 和 2。
 
 
 算术运算符
 Swift 中所有数值类型都支持了基本的四则算术运算符：
 加法（+）
 减法（-）
 乘法（*）
 除法（/）
 加法运算符也可用于 String 的拼接：
 "hello, " + "world"  // 等于 "hello, world"

 
 求余运算符
 1.-9%4 = -1
 2.在对负数 b 求余时，b 的符号会被忽略。这意味着 a % b 和 a % -b 的结果是相同的。
 
 
 比较运算符（Comparison Operators）
 所有标准 C 语言中的比较运算符都可以在 Swift 中使用：
 等于（a == b）
 不等于（a != b）
 大于（a > b）
 小于（a < b）
 大于等于（a >= b）
 小于等于（a <= b）
 每个比较运算都返回了一个标识表达式是否成立的布尔值：
 1 == 1   // true, 因为 1 等于 1
 元组可以比较的
 1.比较元组大小会按照从左到右、逐值比较的方式，直到发现有两个值不等时停止。如果所有的值都相等，那么这一对元组我们就称它们是相等的 (1, "zebra") < (2, "apple")   // true，因为 1 小于 2
 2.Bool 不能被比较，也意味着存有布尔类型的元组不能被比较。
 3.Swift 标准库只能比较七个以内元素的元组比较函数。如果你的元组元素超过七个时，你需要自己实现比较运算符。
 
 
 空合运算符（Nil Coalescing Operator）
 空合运算符(a ?? b)将对可选类型a进行空判断，如果a包含一个值就进行解封，否则就返回一个默认值b.这个运算符有两个条件:
 表达式a必须是Optional类型
 默认值b的类型必须要和a存储值的类型保持一致
 a != nil ? a! : b
 上述代码使用了三目运算符。当可选类型 a 的值不为空时，进行强制解封（a!），访问 a 中的值；反之返回默认值 b。无疑空合运算符（??）提供了一种更为优雅的方式去封装条件判断和解封两种行为，显得简洁以及更具可读性。
 
 
 区间运算符（Range Operators）
 闭区间运算符（a...b）定义一个包含从 a 到 b（包括 a 和 b）的所有值的区间。a 的值不能超过 b。 ‌ 闭区间运算符在迭代一个区间的所有值时是非常有用的，如在 for-in 循环中：
 半开区间运算符（a..<b）定义一个从 a 到 b 但不包括 b 的区间。 之所以称为半开区间，是因为该区间包含第一个值而不包括最后的值。
 半开区间的实用性在于当你使用一个从 0 开始的列表（如数组）时，非常方便地从0数到列表的长度。
 
 逻辑运算符（Logical Operators）
 你只需要记住操作对象是逻辑布尔值就行了，即a和b必须是Bool类型就行了。与或非左结合
 逻辑运算符的操作对象是逻辑布尔值。Swift 支持基于 C 语言的三个标准逻辑运算。
 逻辑非（!a）
 逻辑与（a && b）
 逻辑或（a || b）
  Swift 逻辑操作符 && 和 || 是左结合的，这意味着拥有多元逻辑操作符的复合表达式优先计算最左边的子表达式。
 */
let (x,y) = (1,2)

if x == y {
    print("===")
}

for index in 1...6 {
    print("\(index) * 5 = \(index * 6)")
}

let names:[String] = ["Ane","Box","Cat","Dog"]
let count = names.count

for index in 0 ..< count  {
    print("第 \(index + 1 )个人的叫\(names[index])")
}





















